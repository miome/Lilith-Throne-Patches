diff -aurdb liliths-throne-public/src/com/lilithsthrone/game/character/effects/Perk.java liliths-throne-public/src/com/lilithsthrone/game/character/effects/Perk.java
--- liliths-throne-public/src/com/lilithsthrone/game/character/effects/Perk.java	2025-01-28 13:28:44.077572225 -0500
+++ liliths-throne-public/src/com/lilithsthrone/game/character/effects/Perk.java	2025-01-29 08:44:57.000000000 -0500
@@ -11,6 +11,7 @@
 import com.lilithsthrone.game.character.attributes.Attribute;
 import com.lilithsthrone.game.character.attributes.CorruptionLevel;
 import com.lilithsthrone.game.character.body.valueEnums.Femininity;
+import com.lilithsthrone.game.character.fetishes.Fetish; // Edited here! -- Ysette
 import com.lilithsthrone.game.character.race.AbstractSubspecies;
 import com.lilithsthrone.game.character.race.Race;
 import com.lilithsthrone.game.character.race.Subspecies;
@@ -2115,10 +2116,18 @@
 		public String applyPerkLost(GameCharacter character) {
 			return UtilText.parsePlayerThought("");
 		}
-
+		// Edited here! -- Ysette
 		@Override
 		public String getDescription(GameCharacter owner) {
 			if (owner!=null && owner.isPlayer()) {
+				if (owner.hasTraitActivated(Perk.FETISH_BROODMOTHER) 
+					|| owner.hasTraitActivated(Perk.FETISH_SEEDER) 
+					|| owner.hasFetish(Fetish.FETISH_PREGNANCY)
+					|| owner.hasFetish(Fetish.FETISH_IMPREGNATION))
+					return "You are very perceptive, and are capable of noticing the slightest of changes in your surroundings."
+							+ " You are always able to determine a person's gender, even if you have no knowledge of what their groin looks like."
+							+ "<br/><br/>With your sensitivity to pregnancy, you can also sense if someone's pregnant, along with their babies' gender and race.";
+				else
 				return "You are very perceptive, and are capable of noticing the slightest of changes in your surroundings."
 						+ " You are always able to determine a person's gender, even if you have no knowledge of what their groin looks like.";
 			} else {
diff -aurdb liliths-throne-public/src/com/lilithsthrone/game/character/effects/StatusEffect.java liliths-throne-public/src/com/lilithsthrone/game/character/effects/StatusEffect.java
--- liliths-throne-public/src/com/lilithsthrone/game/character/effects/StatusEffect.java	2025-01-28 13:28:44.084572217 -0500
+++ liliths-throne-public/src/com/lilithsthrone/game/character/effects/StatusEffect.java	2025-02-03 19:54:28.000000000 -0500
@@ -46,6 +46,7 @@
 import com.lilithsthrone.game.character.npc.submission.Silence;
 import com.lilithsthrone.game.character.persona.Occupation;
 import com.lilithsthrone.game.character.persona.SexualOrientation;
+import com.lilithsthrone.game.character.pregnancy.Litter;
 import com.lilithsthrone.game.character.quests.QuestLine;
 import com.lilithsthrone.game.character.race.AbstractRace;
 import com.lilithsthrone.game.character.race.Race;
@@ -4060,6 +4061,7 @@
 		}
 	};
 	
+	// Edited here! -- Ysette
 	public static AbstractStatusEffect PREGNANT_0 = new AbstractStatusEffect(80,
 			"risk of pregnancy",
 			"pregnancy0",
@@ -4070,6 +4072,23 @@
 		@Override
 		public String getDescription(GameCharacter target) {
 			if(Main.game.isInNewWorld()) {
+				PlayerCharacter player = Main.game.getPlayer();
+				if(player.hasTraitActivated(Perk.OBSERVANT) && 
+					(player.hasTraitActivated(Perk.FETISH_BROODMOTHER) 
+					|| player.hasTraitActivated(Perk.FETISH_SEEDER) 
+					|| player.hasFetish(Fetish.FETISH_PREGNANCY)
+					|| player.hasFetish(Fetish.FETISH_IMPREGNATION))) {
+						int count = 0;
+						if(target.isPregnant()) {
+							for(Litter litter : target.getPregnantLitters()) {
+								count += litter.getTotalLitterCount();
+							}
+							return UtilText.parse(target,
+								"After recently having unprotected sex, there's a risk that [npc.name] will get pregnant!"
+								+ "<br/>[style.colourArcane(Through the your astute observation and sensitivity to pregnancy however, you can sense that " 
+								+Util.intToString(count)+" of [npc.her] egg" +(count==1?" has":"s have")+ " already been fertilized!)]");
+						}
+					}
 				return UtilText.parse(target,
 						"After recently having unprotected sex, there's a risk that [npc.name] will get pregnant!"
 							+ " Due to the fact that the arcane accelerates people's pregnancies, [npc.she]'ll know if [npc.sheIs] pregnant within a matter of hours...");
@@ -4087,8 +4106,40 @@
 				target.addStatusEffect(PREGNANT_1, 60 * 60 * ((maxHourLength-12) + Util.random.nextInt(13)));
 				target.loadImages(true); // Reload images for pregnant versions
 				
+				int count = 0;
+				for(Litter litter : target.getPregnantLitters()) {
+					count += litter.getTotalLitterCount();
+				}
+				StringBuilder isPregnant = new StringBuilder();
+
 				if (target.isPlayer() && !((PlayerCharacter) target).isQuestCompleted(QuestLine.SIDE_FIRST_TIME_PREGNANCY)) {
 					if(target.hasFetish(Fetish.FETISH_PREGNANCY)) {
+						if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+							isPregnant.append(
+								"Taking a closer look at your swollen, slimy stomach, you suddenly realise that you can see "
+									+Util.intToString(count)+" little slime core"+(count==1?"":"s")+" growing in "
+									+ (target.hasVagina()?"the place where your womb should be.":"your belly.")
+									+ " You can't help but let out a delighted squeal of happiness as you see your "
+									+(count==1?"child":"children")+" growing inside of you, and spend the next few minutes stroking and rubbing your wonderfully-swollen abdomen in a state of absolute bliss."
+									+ " Eventually, however, you decide that you should probably go and see Lilaya, so that she can help you figure out all the details of giving birth.");
+						}
+						else if(target.hasTraitActivated(Perk.OBSERVANT) && target.hasTraitActivated(Perk.FETISH_BROODMOTHER)) {
+							isPregnant.append("Taking a closer look at your swollen stomach, you suddenly realise that you can sense "+Util.intToString(count));
+							if(target.isVaginaEggLayer()) {
+								isPregnant.append(" egg"+(count==1?"":"s"));
+							}
+							else {
+								isPregnant.append(" little bab"+(count==1?"y":"ies"));
+							}
+							isPregnant.append(" growing in your belly."
+												+ " You can't help but let out a delighted squeal of happiness as you feel your "
+													+(count==1?"child":"children")+" growing inside of you, and spend the next few minutes stroking and rubbing your wonderfully-swollen abdomen in a state of absolute bliss."
+												+ " Eventually, however, you decide that you should probably go and see Lilaya, so that she can help you figure out all the details of giving birth.");
+						}
+						else {
+							isPregnant.append("After a little while of stroking and rubbing your wonderfully-swollen abdomen, you start to calm down a little."
+											+ " You decide that you should probably go and see Lilaya, so that she can help you figure out all the details of giving birth.");
+						}
 						sb.append("<p>"
 								+ "For the last few hours, your belly has been gradually swelling."
 								+ " The progress was so slow that you didn't even realise anything was happening, but as you glance down at your stomach, there's no mistaking it."
@@ -4114,21 +4165,39 @@
 										+ "Wait! Of course! <b>Lilaya!</b> She'll want to see this too!)]"
 							+ "</p>"
 							+ "<p>"
-								+ (target.getBodyMaterial()==BodyMaterial.SLIME
-									?"Taking a closer look at your swollen, slimy stomach, you suddenly realise that you can see "
-											+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" little slime core"+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing in "
-											+ (target.hasVagina()?"the place where your womb should be.":"your belly.")
-										+ " You can't help but let out a delighted squeal of happiness as you see your "
-											+(target.getPregnantLitter().getTotalLitterCount()==1?"child":"children")+" growing inside of you, and spend the next few minutes stroking and rubbing your wonderfully-swollen abdomen in a state of absolute bliss."
-										+ " Eventually, however, you decide that you should probably go and see Lilaya, so that she can help you figure out all the details of giving birth."
-									:"After a little while of stroking and rubbing your wonderfully-swollen abdomen, you start to calm down a little."
-										+ " You decide that you should probably go and see Lilaya, so that she can help you figure out all the details of giving birth.")
+								+ isPregnant.toString()
 							+ "</p>"
 							+ "<p style='text-align:center;'>"
 								+ "<b style='color:"+ PresetColour.GENERIC_SEX.toWebHexString() + ";'>You're pregnant!</b>"
 							+ "</p>");
 						
 					} else {
+						if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+							isPregnant.append(
+								"As you take one last look at your swollen, slimy stomach, you suddenly realise that you can see "
+								+Util.intToString(count)+" little slime core"+(count==1?"":"s")+" growing in "
+								+ (target.hasVagina()?"the place where your womb should be.":"your belly.")
+								+ " You can't help but let out a shocked cry as you see your "
+								+(count==1?"child":"children")+" growing inside of you, and spend the next few minutes stroking and rubbing your swollen abdomen in a state of panic."
+								+ " Eventually, however, you start to calm down a little, and decide that you should probably go and see Lilaya as soon as possible.");
+						}
+						else if(target.hasTraitActivated(Perk.OBSERVANT) && target.hasTraitActivated(Perk.FETISH_BROODMOTHER)) {
+							isPregnant.append("As you take one last look at your swollen stomach, you suddenly realise that you can sense "+Util.intToString(count));
+							if(target.isVaginaEggLayer()) {
+								isPregnant.append(" egg"+(count==1?"":"s"));
+							}
+							else {
+								isPregnant.append(" little bab"+(count==1?"y":"ies"));
+							}
+							isPregnant.append(" growing in your belly."
+											+ " You can't help but let out a shocked cry as you feel your "
+												+(count==1?"child":"children")+" growing inside of you, and spend the next few minutes stroking and rubbing your swollen abdomen in a state of panic."
+											+ " Eventually, however, you start to calm down a little, and decide that you should probably go and see Lilaya as soon as possible.");
+						}
+						else {
+							isPregnant.append("You start to calm down a little as the initial shock starts to wear off."
+											+ " If anyone knows what to do, it'll be Lilaya.");
+						}
 						sb.append("<p>"
 									+ "For the last few hours, your belly has been gradually swelling."
 									+ " The progress was so slow that you didn't even realise anything was happening, but as you glance down at your stomach, there's no mistaking it."
@@ -4154,15 +4223,7 @@
 											+ "Wait! Of course! <b>Lilaya!</b> She'll know what to do!)]"
 								+ "</p>"
 								+ "<p>"
-									+ (target.getBodyMaterial()==BodyMaterial.SLIME
-										?"As you take one last look at your swollen, slimy stomach, you suddenly realise that you can see "
-												+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" little slime core"+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing in "
-												+ (target.hasVagina()?"the place where your womb should be.":"your belly.")
-											+ " You can't help but let out a shocked cry as you see your "+(target.getPregnantLitter().getTotalLitterCount()==1?"child":"children")
-												+" growing inside of you, and spend the next few minutes stroking and rubbing your swollen abdomen in a state of panic."
-											+ " Eventually, however, you start to calm down a little, and decide that you should probably go and see Lilaya as soon as possible."
-										:"You start to calm down a little as the initial shock starts to wear off."
-											+ " If anyone knows what to do, it'll be Lilaya.")
+									+ isPregnant.toString()
 								+ "</p>"
 								+ "<p style='text-align:center;'>"
 									+ "<b style='color:"+ PresetColour.GENERIC_SEX.toWebHexString() + ";'>You're pregnant!</b>"
@@ -4170,19 +4231,34 @@
 					}
 					
 				} else {
+					if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+						isPregnant.append("</p>"
+									+ "<p>"
+										+ "Looking a little closer at your swollen stomach, you see "+Util.intToString(count)+" little slime core"
+											+(count==1?"":"s")+" growing in "+ (target.hasVagina()?"the place where your womb should be.":"your belly.")
+										+ " You can't help but let out a happy little sigh as you see your "+(count==1?"child":"children")
+										+" growing inside of you, and spend the next few minutes stroking and rubbing your swollen abdomen in a state of motherly bliss.");
+					}
+					else if(target.hasTraitActivated(Perk.OBSERVANT) && (target.hasTraitActivated(Perk.FETISH_BROODMOTHER) || target.hasFetish(Fetish.FETISH_PREGNANCY))) {
+						isPregnant.append("</p>"
+									+ "<p>"
+										+ "Looking a little closer at your swollen stomach, you sense "+Util.intToString(count));
+						if(target.isVaginaEggLayer()) {
+							isPregnant.append(" egg"+(count==1?"":"s"));
+						}
+						else {
+							isPregnant.append(" little bab"+(count==1?"y":"ies"));
+						}
+						isPregnant.append(" growing in your belly."
+										+ " You can't help but let out a happy little sigh as you feel your "+(count==1?"child":"children")
+										+" growing inside of you, and spend the next few minutes stroking and rubbing your swollen abdomen in a state of motherly bliss.");
+					}
 					sb.append("<p>"
 							+ "For the last couple of hours, your belly has been gradually swelling."
 							+ " The progress was so slow that you didn't even realise anything was happening, but as you glance down at your stomach, there's no mistaking it."
 							+ " You're pregnant again."
 							+ " You start stroking your abdomen, making soft little gasps as the familiar feeling of being knocked up returns to you."
-							+ (target.getBodyMaterial()==BodyMaterial.SLIME
-								?"</p>"
-								+ "<p>"
-									+ "Looking a little closer at your swollen, slimy stomach, you see "+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" little slime core"
-										+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing in "+ (target.hasVagina()?"the place where your womb should be.":"your belly.")
-									+ " You can't help but let out a happy little sigh as you see your "+(target.getPregnantLitter().getTotalLitterCount()==1?"child":"children")
-									+" growing inside of you, and spend the next few minutes stroking and rubbing your swollen abdomen in a state of motherly bliss."
-								:"")
+							+ isPregnant.toString()
 						+ "</p>"
 						+ "<p>"
 							+ (target.hasFetish(Fetish.FETISH_PREGNANCY)
@@ -4306,6 +4382,7 @@
 		}
 	};
 	
+	// Edited here! -- Ysette
 	public static AbstractStatusEffect PREGNANT_1 = new AbstractStatusEffect(80,
 			"pregnant",
 			"pregnancy1",
@@ -4315,12 +4392,36 @@
 			Util.newArrayListOfValues("-5% [style.colourHealth(Maximum "+Attribute.HEALTH_MAXIMUM.getName()+")]")) {
 		@Override
 		public String getDescription(GameCharacter target) {
+			PlayerCharacter player = Main.game.getPlayer();
+			StringBuilder xrayCheck = new StringBuilder();
+			int count = 0;
+			for(Litter litter : target.getPregnantLitters()) {
+				count += litter.getTotalLitterCount();
+			}
+			if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+				xrayCheck.append(" Through the [npc.skinColour] [npc.skin] that makes up [npc.her] body, you can see "+Util.intToString(count)+" little slime core"
+									+(count==1?"":"s")+" growing inside of [npc.herHim].");
+			}
+			else if(player.hasTraitActivated(Perk.OBSERVANT) 
+				&& (player.hasTraitActivated(Perk.FETISH_BROODMOTHER) 
+				|| player.hasTraitActivated(Perk.FETISH_SEEDER) 
+				|| player.hasFetish(Fetish.FETISH_PREGNANCY)
+				|| player.hasFetish(Fetish.FETISH_IMPREGNATION))) {
+					xrayCheck.append(" Through the your astute observation and sensitivity to pregnancy, you can sense "+Util.intToString(count));
+					if(target.isVaginaEggLayer()) {
+						xrayCheck.append(" egg"+(count==1?"":"s"));
+					}
+					else {
+						xrayCheck.append(" little bab"+(count==1?"y":"ies"));
+					}
+					xrayCheck.append(" growing inside of [npc.herHim].");
+			}
+			else {
+				xrayCheck.append(" Due to the fact that the arcane accelerates people's pregnancies, [npc.she]'ll move onto the next stage with alarming speed.");
+			}
 			return UtilText.parse(target,
 						"From one of [npc.namePos] recent sexual encounters, [npc.sheHas] been impregnated!"
-							+ (target.getBodyMaterial()==BodyMaterial.SLIME
-								?" Through the [npc.skinColour] [npc.skin] that makes up [npc.her] body, you can see "+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" little slime core"
-									+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing inside of [npc.herHim]."
-								:" Due to the fact that the arcane accelerates people's pregnancies, [npc.she]'ll move onto the next stage with alarming speed."));
+							+ xrayCheck.toString());
 		}
 		@Override
 		public String extraRemovalEffects(GameCharacter target) {
@@ -4357,18 +4458,38 @@
 				return "";
 			}
 			
+			int count = 0;
+			for(Litter litter : target.getPregnantLitters()) {
+				count += litter.getTotalLitterCount();
+			}
+
+			StringBuilder isPregnant = new StringBuilder();
+			if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+				isPregnant.append("<p>"
+							+ "Clearly visible through the translucent slime which your body is made up of, you see that the "
+								+Util.intToString(count)+" slime core"+(count==1?"":"s")
+							+ " growing inside of you "+(count==1?"has":"have")+" gotten a lot larger..."
+							+ "</p>");
+			}
+			else if(target.hasTraitActivated(Perk.OBSERVANT) && (target.hasTraitActivated(Perk.FETISH_BROODMOTHER) || target.hasFetish(Fetish.FETISH_PREGNANCY))) {
+				isPregnant.append("<p>"
+							+ "With your observation and sensitivity to pregnancy, you sense that the " +Util.intToString(count));
+				if(target.isVaginaEggLayer()) {
+					isPregnant.append(" egg"+(count==1?"":"s"));
+				}
+				else {
+					isPregnant.append(" little bab"+(count==1?"y":"ies"));
+				}
+				isPregnant.append(" growing inside of you "+(count==1?"has":"have")+" gotten a lot larger..." + "</p>");
+			}
+
 			if (!((PlayerCharacter) target).isQuestCompleted(QuestLine.SIDE_FIRST_TIME_PREGNANCY)) {
 				return "<p>"
 							+ "Even though the change has been gradual, you're suddenly hit by the realisation that your belly has swollen to a massive size."
 							+ " You can't resist rubbing your hands over the huge bump in your abdomen, and you wonder just how big it's going to get."
 							+ " As this is your first time getting pregnant, you're not quite sure what to expect, but you're reassured as you remember that Lilaya's always there to help."
 						+ "</p>"
-						+ (target.getBodyMaterial()==BodyMaterial.SLIME
-								?"<p>"
-									+ "Clearly visible through the translucent slime which your body is made up of, you see that the "
-										+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" slime core"+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing inside of you have gotten a lot larger..."
-								+ "</p>"
-								:"")
+						+ isPregnant.toString()
 						+ "<p style='text-align:center;'>"
 							+ "<b style='color:" + PresetColour.GENERIC_SEX.toWebHexString() + ";'>You're now heavily pregnant!</b>"
 						+ "</p>"
@@ -4390,12 +4511,7 @@
 							+ " You can't resist rubbing your hands over the huge bump in your abdomen, smiling fondly at the comforting feeling."
 							+ " Having been through all this before, you know that you've still got a way to go before you're ready to give birth."
 						+ "</p>"
-						+ (target.getBodyMaterial()==BodyMaterial.SLIME
-							?"<p>"
-								+ "Clearly visible through the translucent slime which your body is made up of, you see that the "
-									+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" slime core"+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing inside of you have gotten a lot larger..."
-							+ "</p>"
-							:"")
+						+ isPregnant.toString()
 						+ "<p style='text-align:center;'>"
 							+ "<b style='color:" + PresetColour.GENERIC_SEX.toWebHexString() + ";'>You're now heavily pregnant!</b>"
 						+ "</p>"
@@ -4421,6 +4537,7 @@
 		}
 	};
 	
+	// Edited here! -- Ysette
 	public static AbstractStatusEffect PREGNANT_2 = new AbstractStatusEffect(80,
 			"heavily pregnant",
 			"pregnancy2",
@@ -4430,12 +4547,36 @@
 			Util.newArrayListOfValues("-10% [style.colourHealth(Maximum "+Attribute.HEALTH_MAXIMUM.getName()+")]")) {
 		@Override
 		public String getDescription(GameCharacter target) {
+			PlayerCharacter player = Main.game.getPlayer();
+			StringBuilder xrayCheck = new StringBuilder();
+			int count = 0;
+			for(Litter litter : target.getPregnantLitters()) {
+				count += litter.getTotalLitterCount();
+			}
+			if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+				xrayCheck.append(" Through the [npc.skinColour] [npc.skin] that makes up [npc.her] body, you can see "+Util.intToString(count)+" slime core"
+									+(count==1?"":"s")+" growing inside of [npc.herHim].");
+			}
+			else if(player.hasTraitActivated(Perk.OBSERVANT)
+				&& (player.hasTraitActivated(Perk.FETISH_BROODMOTHER) 
+				|| player.hasTraitActivated(Perk.FETISH_SEEDER) 
+				|| player.hasFetish(Fetish.FETISH_PREGNANCY)
+				|| player.hasFetish(Fetish.FETISH_IMPREGNATION))) {
+					xrayCheck.append(" Through the your astute observation and sensitivity to pregnancy, you can sense "+Util.intToString(count));
+					if(target.isVaginaEggLayer()) {
+						xrayCheck.append(" egg"+(count==1?"":"s"));
+					}
+					else {
+						xrayCheck.append(" little bab"+(count==1?"y":"ies"));
+					}
+					xrayCheck.append(" growing inside of [npc.herHim].");
+			}
+			else {
+				xrayCheck.append(" Due to the fact that the arcane accelerates people's pregnancies, [npc.she]'ll move onto the next stage with alarming speed.");
+			}
 			return UtilText.parse(target,
 						"[npc.NamePos] stomach has swollen considerably, making it obvious that [npc.sheIs] heavily pregnant."
-							+ (target.getBodyMaterial()==BodyMaterial.SLIME
-								?" Through the [npc.skinColour] [npc.skin] that makes up [npc.her] body, you can see "+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" little slime core"
-									+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing inside of [npc.herHim]..."
-								:" Due to the fact that the arcane accelerates people's pregnancies, [npc.she]'ll move onto the final stage with alarming speed."));
+							+ xrayCheck.toString());
 		}
 		@Override
 		public String extraRemovalEffects(GameCharacter target) {
@@ -4472,19 +4613,32 @@
 				return "";
 			}
 			
+			int count = 0;
+			for(Litter litter : target.getPregnantLitters()) {
+				count += litter.getTotalLitterCount();
+			}
+			StringBuilder isPregnant = new StringBuilder();
+
 			if (!((PlayerCharacter) target).isQuestCompleted(QuestLine.SIDE_FIRST_TIME_PREGNANCY)) {
+				if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+					isPregnant.append(" Clearly visible through the translucent slime which your body is made up of, you see that the "
+											+Util.intToString(count)+" slime core"
+											+(count==1?"":"s")+" growing inside of you "+(count==1?"has":"have")
+											+" grown to be just as large as your own, and you know that you're now ready to give birth.");
+				}
+				else {
+					if(target.isVaginaEggLayer()) {
+						isPregnant.append(" Although you can feel the hard shells of your clutch of eggs pressing out against the inner walls of your womb, you don't find the sensation to be in any way uncomfortable."
+											+ " If anything, the feeling only seems to be boosting your maternal instincts, and you often catch yourself daydreaming about laying and incubating your eggs.");
+					}
+					else {
+						isPregnant.append(" Some time in the last couple of hours, you felt a strange rumble in your pregnant bump, and after panicking for a little while, you realised that it was your offspring kicking about in your womb."
+											+ " You keep feeling another kick every now and then, and you know that you're ready to give birth.");
+					}
+				}
 				return "<p>"
 							+ "By now, your stomach has completely ballooned out in front of you, and you're having to arch your back and support yourself with one hand as you walk around."
-							+ (target.getBodyMaterial()==BodyMaterial.SLIME
-								?" Clearly visible through the translucent slime which your body is made up of, you see that the "
-										+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" slime core"
-										+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing inside of you "+(target.getPregnantLitter().getTotalLitterCount()==1?"has":"have")
-										+" grown to be just as large as your own, and you know that you're now ready to give birth."
-								:(target.isVaginaEggLayer()
-									?" Although you can feel the hard shells of your clutch of eggs pressing out against the inner walls of your womb, you don't find the sensation to be in any way uncomfortable."
-										+ " If anything, the feeling only seems to be boosting your maternal instincts, and you often catch yourself daydreaming about laying and incubating your eggs."
-									:" Some time in the last couple of hours, you felt a strange rumble in your pregnant bump, and after panicking for a little while, you realised that it was your offspring kicking about in your womb."
-										+ " You keep feeling another kick every now and then, and you know that you're ready to give birth."))
+							+ isPregnant.toString()
 						+ "</p>"
 						+ "<p>"
 							+ UtilText.parseThought("I really should go and see Lilaya...", Main.game.getPlayer())
@@ -4505,17 +4659,25 @@
 							+ "<b style='color:" + PresetColour.GENERIC_SEX.toWebHexString() + ";'>You're now ready to give birth!</b>" 
 						+ "</p>";
 			} else {
+				if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+					isPregnant.append(" Clearly visible through the translucent slime which your body is made up of, you see that the "
+											+Util.intToString(count)+" slime core"
+											+(count==1?"":"s")+" growing inside of you "+(count==1?"has":"have")
+											+" grown to be just as large as your own, and you know that you're now ready to give birth.");
+				}
+				else {
+					if(target.isVaginaEggLayer()) {
+						isPregnant.append(" Although you can feel the hard shells of your clutch of eggs pressing out against the inner walls of your womb, you don't find the sensation to be in any way uncomfortable."
+											+ " If anything, the feeling only seems to be boosting your maternal instincts, and you often catch yourself daydreaming about laying and incubating your eggs.");
+					}
+					else {
+						isPregnant.append(" Some time in the last couple of hours, you felt a familiar rumble in your pregnant bump, and from experience, you instantly recognised that it was your offspring kicking about in your womb."
+											+ " You keep feeling another kick every now and then, and you know that you're ready to give birth.");
+					}
+				}
 				return "<p>"
 							+ "By now, your stomach has completely ballooned out in front of you, and you're having to arch your back and support yourself with one hand as you walk around."
-							+ (target.getBodyMaterial()==BodyMaterial.SLIME
-								?" Clearly visible through the translucent slime which your body is made up of, you see that the "
-										+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" slime core"+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+" growing inside of you "
-										+(target.getPregnantLitter().getTotalLitterCount()==1?"has":"have")+" grown to be just as large as your own, and you know that you're now ready to give birth."
-								:(target.isVaginaEggLayer()
-									?" Although you can feel the hard shells of your clutch of eggs pressing out against the inner walls of your womb, you don't find the sensation to be in any way uncomfortable."
-										+ " If anything, the feeling only seems to be boosting your maternal instincts, and you often catch yourself daydreaming about laying and incubating your eggs."
-									:" Some time in the last couple of hours, you felt a familiar rumble in your pregnant bump, and from experience, you instantly recognised that it was your offspring kicking about in your womb."
-										+ " You keep feeling another kick every now and then, and you know that you're ready to give birth."))
+							+ isPregnant.toString()
 						+ "</p>"
 						+ "<p>"
 							+ UtilText.parseThought("I really should go and see Lilaya... Or maybe I'll stay like this for a little while!", Main.game.getPlayer())
@@ -4544,6 +4706,8 @@
 			return true;
 		}
 	};
+
+	// Edited here! -- Ysette
 	public static AbstractStatusEffect PREGNANT_3 = new AbstractStatusEffect(80,
 			"ready for birthing",
 			"pregnancy3",
@@ -4553,14 +4717,35 @@
 			Util.newArrayListOfValues("-15% [style.colourHealth(Maximum "+Attribute.HEALTH_MAXIMUM.getName()+")]")) {
 		@Override
 		public String getDescription(GameCharacter target) {
+			PlayerCharacter player = Main.game.getPlayer();
+			StringBuilder xrayCheck = new StringBuilder();
+			int count = 0;
+			for(Litter litter : target.getPregnantLitters()) {
+				count += litter.getTotalLitterCount();
+			}
+			if(target.getBodyMaterial()==BodyMaterial.SLIME) {
+				xrayCheck.append(" Through the [npc.skinColour] [npc.skin] that makes up [npc.her] body, you can see "+Util.intToString(count)+" fully-grown slime core"
+									+(count==1?"":"s")+" growing inside of [npc.herHim].");
+			}
+			else if(player.hasTraitActivated(Perk.OBSERVANT)
+				&& (player.hasTraitActivated(Perk.FETISH_BROODMOTHER) 
+				|| player.hasTraitActivated(Perk.FETISH_SEEDER) 
+				|| player.hasFetish(Fetish.FETISH_PREGNANCY)
+				|| player.hasFetish(Fetish.FETISH_IMPREGNATION))) {
+					xrayCheck.append(" Through the your astute observation and sensitivity to pregnancy, you can sense "+Util.intToString(count));
+					if(target.isVaginaEggLayer()) {
+						xrayCheck.append(" egg"+(count==1?"":"s"));
+					}
+					else {
+						xrayCheck.append(" bab"+(count==1?"y":"ies"));
+					}
+					xrayCheck.append(" growing inside of [npc.herHim].");
+			}
 			return UtilText.parse(target,
 							(target.isTaur()
 								?"[npc.NamePos] belly has inflated to a colossal size, making it clear to anyone who glances [npc.her] way that [npc.sheIs] ready to give birth."
 								:"[npc.NamePos] belly has inflated to a colossal size, and [npc.sheIs] finding that [npc.sheHasFull] to support [npc.her] back with one hand as [npc.she] [npc.verb(walk)].")
-							+ (target.getBodyMaterial()==BodyMaterial.SLIME
-								?" Through the [npc.skinColour] [npc.skin] that makes up [npc.her] body, you can see "+Util.intToString(target.getPregnantLitter().getTotalLitterCount())+" fully-grown slime core"
-									+(target.getPregnantLitter().getTotalLitterCount()==1?"":"s")+"."
-								:"")
+							+ xrayCheck.toString()
 							+(target.isPlayer()
 								?" It might be a good idea to visit Lilaya..."
 								:""));
diff -aurdb liliths-throne-public/src/com/lilithsthrone/game/character/GameCharacter.java liliths-throne-public/src/com/lilithsthrone/game/character/GameCharacter.java
--- liliths-throne-public/src/com/lilithsthrone/game/character/GameCharacter.java	2025-01-28 13:28:44.026572286 -0500
+++ liliths-throne-public/src/com/lilithsthrone/game/character/GameCharacter.java	2025-02-05 00:27:33.000000000 -0500
@@ -415,6 +415,7 @@
 	protected List<PregnancyPossibility> potentialPartnersAsMother;
 	protected List<PregnancyPossibility> potentialPartnersAsFather;
 	protected Litter pregnantLitter;
+	protected List<Litter> pregnantLitters; // Edited here! -- Ysette
 	protected Map<SexAreaOrifice, Litter> incubatingLitters;
 	protected List<Litter> littersBirthed;
 	protected List<Litter> littersFathered;
@@ -693,6 +694,7 @@
 		timeProgressedToFinalPregnancyStage = 1;
 		timeProgressedToFinalIncubationStage = new HashMap<>();
 		pregnantLitter = null;
+		pregnantLitters = new ArrayList<>();
 		incubatingLitters = new HashMap<>();
 		implantedLitters = new ArrayList<>();
 		incubatedLitters = new ArrayList<>();
@@ -1247,6 +1249,16 @@
 			}
 		}
 
+		// Edited here!-- Ysette
+		if(!this.getPregnantLitters().isEmpty()) {
+			Element characterPregnancyCurrentLitters = doc.createElement("pregnantLitters");
+			characterPregnancy.appendChild(characterPregnancyCurrentLitters);
+			// this.getPregnantLitter().saveAsXML(characterPregnancyCurrentLitter, doc);
+			for(Litter litter : this.getPregnantLitters()) {
+				litter.saveAsXML(characterPregnancyCurrentLitters, doc);
+			}
+		}
+		
 		if(this.getPregnantLitter() != null) {
 			Element characterPregnancyCurrentLitter = doc.createElement("pregnantLitter");
 			characterPregnancy.appendChild(characterPregnancyCurrentLitter);
@@ -2690,6 +2702,21 @@
 					}
 				}
 				
+				// Edited here! -- Ysette
+				nodes = pregnancyElement.getElementsByTagName("pregnantLitters");
+				if(nodes.getLength()>0) {
+					element = (Element) nodes.item(0);
+					if(element!=null) {
+						NodeList litterElements = element.getElementsByTagName("litter");
+						for(int i=0; i<litterElements.getLength(); i++){
+							Element e = ((Element)litterElements.item(i));
+							
+							character.getPregnantLitters().add(Litter.loadFromXML(e, doc));
+							Main.game.getCharacterUtils().appendToImportLog(log, "<br/>Added pregnant litters.");
+						}
+					}
+				}
+				
 				nodes = pregnancyElement.getElementsByTagName("pregnantLitter");
 				if(nodes.getLength()>0) {
 					element = (Element) ((Element) nodes.item(0)).getElementsByTagName("litter").item(0);
@@ -3783,6 +3810,47 @@
 			}
 		}
 
+		// Edited here! -- Ysette
+		PlayerCharacter player = Main.game.getPlayer();
+		if(this.isPregnant() && player.hasTraitActivated(Perk.OBSERVANT) && 
+			(player.hasTraitActivated(Perk.FETISH_BROODMOTHER) 
+			|| player.hasTraitActivated(Perk.FETISH_SEEDER) 
+			|| player.hasFetish(Fetish.FETISH_PREGNANCY)
+			|| player.hasFetish(Fetish.FETISH_IMPREGNATION))) {
+				Map<String, List<Integer>> litterMap = new HashMap<>();
+				for(Litter litter : this.getPregnantLitters()) {
+					List<OffspringSeed> osArray = new ArrayList<>(litter.getOffspringSeed());
+					for(int num = 0; num < osArray.size(); num++) {
+						Body osBody = osArray.get(num).getBody();
+						String race = Util.capitaliseSentence(osBody.getRace().getName(osBody.isFeral()));
+						if(!litterMap.containsKey(race)) {
+							List<Integer> osList = new ArrayList<Integer>();
+							osList.add(0);
+							osList.add(0);
+							litterMap.put(race, osList);
+						}
+						if(osBody.isFeminine()) {
+							litterMap.get(race).set(0, litterMap.get(race).get(0)+1); // Daughters
+						}
+						else {
+							litterMap.get(race).set(1, litterMap.get(race).get(1)+1); // Sons
+						}
+					}
+				}
+				List<String> raceList = new ArrayList<String>(litterMap.keySet());
+				StringBuilder litterList = new StringBuilder();
+				if(this.isPlayer()) {
+					infoScreenSB.append("</p><p style='text-align:center;'><i>With a bit of concentration, you can sense that you are pregnant with: ");
+				}
+				else {
+					infoScreenSB.append("</p><p style='text-align:center;'><i>With a bit of concentration, you can sense that [npc.sheIs] pregnant with: ");
+				}
+				for (String race : raceList) {
+					litterList.append("<br/>" + race + ": [style.colourFeminine(Daughters)]: " + litterMap.get(race).get(0).toString() + " [style.colourMasculine(Sons)]: "+ litterMap.get(race).get(1).toString());
+				}
+				infoScreenSB.append(litterList.toString()+"</i>");
+			}
+		
 		infoScreenSB.append("</p>");
 		
 		infoScreenSB.append("<h6>Relationships</h6>"
@@ -21121,11 +21189,10 @@
 		String pregnancyDescription = PregnancyDescriptor.getPregnancyDescriptorBasedOnProbability(pregnancyChance).getDescriptor(this, partner, directSexInsemination);
 		
 		// Now roll for pregnancy:
-		if (!this.isPregnant()) {
-			if (!this.hasStatusEffect(StatusEffect.PREGNANT_0) && !this.isDoll()) {
+		if (pregnancyChance>0 && Math.random() <= pregnancyChance && !this.isVisiblyPregnant()) {
+			if (!this.hasStatusEffect(StatusEffect.PREGNANT_0)) {
 				this.addStatusEffect(StatusEffect.PREGNANT_0, (60 * 60) * (4 + Util.random.nextInt(5)));
 			}
-			if (pregnancyChance>0 && Math.random() <= pregnancyChance) {
 				AbstractRace litterSizeBasedOn = null;
 				
 				if (this.getBodyMaterial() == BodyMaterial.SLIME) {
@@ -21142,6 +21209,15 @@
 				int minimumNumberOfChildren = litterSizeBasedOn.getNumberOfOffspringLow();
 				int maximumNumberOfChildren = litterSizeBasedOn.getNumberOfOffspringHigh();
 				
+			// Wanna add some relevant buffs~ <3 -- Ysette
+			if(this.hasFetish(Fetish.FETISH_PREGNANCY)) {
+				minimumNumberOfChildren += 1;
+				maximumNumberOfChildren += 1;
+			}
+			if(partner!=null && partner.hasFetish(Fetish.FETISH_IMPREGNATION)) {
+				minimumNumberOfChildren += 1;
+				maximumNumberOfChildren += 1;
+			}
 
 				if(this.hasTraitActivated(Perk.FETISH_BROODMOTHER)) {
 					maximumNumberOfChildren *= 2;
@@ -21152,6 +21228,7 @@
 				
 				int numberOfChildren = minimumNumberOfChildren + Util.random.nextInt((maximumNumberOfChildren-minimumNumberOfChildren)+1);
 				
+			
 				if(this.hasStatusEffect(StatusEffect.BROODMOTHER_PILL)) {
 					numberOfChildren *= 2;
 				}
@@ -21159,6 +21236,38 @@
 					numberOfChildren *= 2;
 				}
 				
+			// Pregnancy stacking modification here -- Ysette
+			if(Main.game.isInSex() && (this.hasTraitActivated(Perk.FETISH_BROODMOTHER) || (partner != null && partner.hasTraitActivated(Perk.FETISH_SEEDER)))) {
+				if(this.isPregnant()) {
+					boolean checkNewLitter = true;
+					for (Litter litter : this.getPregnantLitters()) {
+						// Find litter father if there's one
+						if (litter.getFather()!=null && partner != null && litter.getFather() == partner) {
+							List<OffspringSeed> offspring = new ArrayList<>(litter.getOffspringSeed()); // Add children here: 
+							for (int i = 0; i < numberOfChildren; i++) { 
+								OffspringSeed os = new OffspringSeed(this, partner, partnerBody);
+								offspring.add(os);
+								try {
+									Main.game.addOffspringSeed(os, false);
+								} catch (Exception e) {
+									e.printStackTrace();
+								}
+							}
+							// Other initial litter data: 
+							fertilisationType = litter.getFertilisationType();
+							LocalDateTime conceptionDate = litter.getConceptionDate();
+							LocalDateTime birthDate = litter.getBirthDate();
+							
+							Litter newLitter = new Litter(conceptionDate, birthDate, this, partner, fertilisationType, offspring);
+							pregnantLitters.remove(litter);
+							pregnantLitters.add(newLitter);
+							pregnantLitter = pregnantLitters.get(0); // In case it's the first litter
+							checkNewLitter = false;
+							break;
+						}
+					}
+					
+					if(partner!=null && checkNewLitter) {
 				List<OffspringSeed> offspring = new ArrayList<>(numberOfChildren);
 				for (int i = 0; i < numberOfChildren; i++) { // Add children here:
 					OffspringSeed os = new OffspringSeed(this, partner, partnerBody);
@@ -21169,28 +21278,107 @@
 						e.printStackTrace();
 					}
 				}
+						Litter newLitter = new Litter(Main.game.getDateNow(), Main.game.getDateNow(), this, partner, fertilisationType, offspring);
+						pregnantLitters.add(newLitter);
+					}
 				
-				pregnantLitter = new Litter(Main.game.getDateNow(), Main.game.getDateNow(), this, partner, fertilisationType, offspring);
+					// COMBO SECTION -- Ysette (TODO, seems there's an issue with this)
+					/* 
+					if(partner != null) {
+						int litterCount = 0;
+						for (Litter litter : this.getPregnantLitters()) {
+							// Find litter father if there's one
+							if (litter.getFather()!=null && litter.getFather() == partner) {
+								litterCount++;
+							}
+						}
+						System.err.println(litterCount);
+						if(litterCount > 0) {
+							System.err.println("true1");
+							if(this.hasTraitActivated(Perk.OBSERVANT) && this.hasTraitActivated(Perk.FETISH_BROODMOTHER)) {
+								System.err.println("true2");
+								pregnancyDescription.append(
+									UtilText.parse(this, partner, "[npc.She] instinctively [npc.verb(know)] that [npc2.nameHasFull] knocked [npc.herHim] up again! (x" 
+									+ litterCount
+									+ "!)</p>"));
+								} 
+							if(partner.hasTraitActivated(Perk.OBSERVANT) && partner.hasTraitActivated(Perk.FETISH_SEEDER)) {
+								System.err.println("true3");
+								pregnancyDescription.append(
+									UtilText.parse(partner, this, "[npc.She] instinctively [npc.verb(know)] that [npc.sheHasFull] knocked up [npc2.name] again! (x" 
+									+ litterCount
+									+ "!)</p>"));
+								}
+						} else {
+							System.err.println("true4");
+							if(this.hasTraitActivated(Perk.OBSERVANT) && this.hasTraitActivated(Perk.FETISH_BROODMOTHER)) {
+								System.err.println("true5");
+								pregnancyDescription.append(
+									UtilText.parse(this, partner, "<p style='text-align:center;>[npc.She] instinctively [npc.verb(know)] that [npc2.nameHasFull] knocked [npc.herHim] up! (x1)</p>"));
+							} 
+							if(partner.hasTraitActivated(Perk.OBSERVANT) && partner.hasTraitActivated(Perk.FETISH_SEEDER)) {
+								System.err.println("true6");
+								pregnancyDescription.append(
+									UtilText.parse(partner, this, "<p style='text-align:center;>[npc.She] instinctively [npc.verb(know)] that [npc.sheHasFull] knocked up [npc2.name]! (x1)</p>"));
+							}
+						}
+					}
+					*/
+				} else {
+					List<OffspringSeed> offspring = new ArrayList<>(numberOfChildren);
+					for (int i = 0; i < numberOfChildren; i++) { // Add children here:
+						OffspringSeed os = new OffspringSeed(this, partner, partnerBody);
+						offspring.add(os);
+						try {
+							Main.game.addOffspringSeed(os, false);
+						} catch (Exception e) {
+							e.printStackTrace();
+						}
+					}
+					Litter newLitter = new Litter(Main.game.getDateNow(), Main.game.getDateNow(), this, partner, fertilisationType, offspring);
 				if(partner==null) {
-					pregnantLitter.setFatherRace(partnerBody.getSubspecies());
+						newLitter.setFatherRace(partnerBody.getSubspecies());
 				}
-				this.resetAllPregnancyReactions();
+					pregnantLitters.add(newLitter);
+					pregnantLitter = pregnantLitters.get(0); 
+				}
+			} else if (!this.isPregnant()) {
+				List<OffspringSeed> offspring = new ArrayList<>(numberOfChildren);
+				for (int i = 0; i < numberOfChildren; i++) { // Add children here:
+					OffspringSeed os = new OffspringSeed(this, partner, partnerBody);
+					offspring.add(os);
+					try {
+						Main.game.addOffspringSeed(os, false);
+					} catch (Exception e) {
+						e.printStackTrace();
+					}
+				}
+				Litter newLitter = new Litter(Main.game.getDateNow(), Main.game.getDateNow(), this, partner, fertilisationType, offspring);
+				if(partner==null) {
+					newLitter.setFatherRace(partnerBody.getSubspecies());
+				}
+				pregnantLitters.add(newLitter);
+				pregnantLitter = pregnantLitters.get(0); 
 			}
+			
+			this.resetAllPregnancyReactions();
 		}
 		
 		return pregnancyDescription;
 	}
 	
+	// Edited here! -- Ysette
 	public boolean isPregnant() {
-		return pregnantLitter != null;
+		return !pregnantLitters.isEmpty();
 	}
 	
 	public boolean isHasAnyPregnancyEffects() {
 		return hasStatusEffect(StatusEffect.PREGNANT_0) || hasStatusEffect(StatusEffect.PREGNANT_1) || hasStatusEffect(StatusEffect.PREGNANT_2) || hasStatusEffect(StatusEffect.PREGNANT_3);
 	}
 	
+	// Edited here! -- Ysette
 	public boolean isVisiblyPregnant() {
-		return pregnantLitter!=null && (hasStatusEffect(StatusEffect.PREGNANT_1) || hasStatusEffect(StatusEffect.PREGNANT_2) || hasStatusEffect(StatusEffect.PREGNANT_3));
+		return !pregnantLitters.isEmpty() && (hasStatusEffect(StatusEffect.PREGNANT_1) || hasStatusEffect(StatusEffect.PREGNANT_2) || hasStatusEffect(StatusEffect.PREGNANT_3));
 	}
 	
 	public long getTimeProgressedToFinalPregnancyStage() {
@@ -21206,8 +21394,32 @@
 	 * 
 	 * @param withBirth True if this pregnancy ends by giving birth.
 	 */
+	// Edited here! -- Ysette
+	public void endPregnancy(boolean withBirth, boolean withClothingManagement) {
+		if(!pregnantLitters.isEmpty()) {
+			for(Litter litter : pregnantLitters) {
+				endPregnancy(litter, withBirth, withClothingManagement);
+			}
+			pregnantLitters.clear();
+		}
+		else {
+			endPregnancy(pregnantLitter, withBirth, withClothingManagement);
+		}
+		incrementLittersGenerated(1);
+	}
+	
+	// Edited here! -- Ysette
 	public void endPregnancy(boolean withBirth) {
-		endPregnancy(withBirth, true);
+		if(!pregnantLitters.isEmpty()) {
+			for(Litter litter : pregnantLitters) {
+				endPregnancy(litter, withBirth, true);
+			}
+			pregnantLitters.clear();
+		}
+		else {
+			endPregnancy(pregnantLitter, withBirth, true);
+		}
+		incrementLittersGenerated(1);
 	}
 	
 	/**
@@ -21216,7 +21428,8 @@
 	 * @param withBirth true if this pregnancy ends by giving birth.
 	 * @param withClothingManagement true if vagina-blocking clothing should be unsealed.
 	 */
-	public void endPregnancy(boolean withBirth, boolean withClothingManagement) {
+	// Edited here! -- Ysette
+	public void endPregnancy(Litter litter, boolean withBirth, boolean withClothingManagement) {
 		for(PregnancyPossibility pregPoss : potentialPartnersAsMother) {
 			if(pregPoss.getFather()!=null) {
 				pregPoss.getFather().getPotentialPartnersAsFather().remove(pregPoss);
@@ -21228,16 +21441,16 @@
 			return;
 		}
 
-		pregnantLitter.setBirthDate(Main.game.getDateNow());
-		if(pregnantLitter.getFather()!=null) { // Set birth date for the father's litter copy:
-			for(Litter fatherCopy : pregnantLitter.getFather().getLittersFathered()) {
-				if(!fatherCopy.getId().isEmpty() && fatherCopy.getId().equals(pregnantLitter.getId())) {
+		litter.setBirthDate(Main.game.getDateNow());
+		if(litter.getFather()!=null) { // Set birth date for the father's litter copy:
+			for(Litter fatherCopy : litter.getFather().getLittersFathered()) {
+				if(!fatherCopy.getId().isEmpty() && fatherCopy.getId().equals(litter.getId())) {
 					fatherCopy.setBirthDate(Main.game.getDateNow());
 					break;
 				}
 			}
 		}
-		Litter birthedLitter = pregnantLitter;
+		Litter birthedLitter = litter;
 
 		if(withBirth) {
 			if(withClothingManagement) {
@@ -21305,7 +21518,7 @@
 			}
 			
 		} else {
-			for(String os : pregnantLitter.getOffspring()) {
+			for(String os : litter.getOffspring()) {
 				if(os.contains("NPCOffspring")) {
 					Main.game.banishNPC(os);
 				} else {
@@ -21321,7 +21534,7 @@
 			this.removeStatusEffectDescription(se);
 		}
 
-		pregnantLitter = null;
+		litter = null;
 		
 		this.resetAllPregnancyReactions();
 		
@@ -21439,7 +21652,7 @@
 						os.setBorn(true);
 						os.setBirthday(LocalDateTime.of(Main.game.getDateNow().getYear(), Main.game.getDateNow().getMonth(), Main.game.getDateNow().getDayOfMonth(), Main.game.getDateNow().getHour(), Main.game.getDateNow().getMinute()));
 						os.setIncubator(this);
-//						System.out.println("offspring seed birthed from incubation");
+			// System.out.println("offspring seed birthed from incubation");
 					} catch(Exception e) {
 						Util.logGetNpcByIdError("endIncubationPregnancy()", id);
 					}
@@ -21449,9 +21662,9 @@
 			getLittersIncubated().add(birthedLitter);
 
 			// Done at time of implanting
-//			if(birthedLitter.getFather()!=null) {
-//				birthedLitter.getFather().getLittersFathered().add(birthedLitter);
-//			}
+		//	if(birthedLitter.getFather()!=null) {
+		//		birthedLitter.getFather().getLittersFathered().add(birthedLitter);
+		//	}
 			
 			// Remove offspring if not related to the player:
 			if(!this.isPlayer()
@@ -21513,14 +21726,14 @@
 		
 		this.removeIncubationLitter(orifice);
 		
-//		this.resetAllPregnancyReactions();
+		// this.resetAllPregnancyReactions();
 	}
 	
 	public void implantPregnantLitter(GameCharacter target, SexAreaOrifice orifice) {
 		if(!this.isPregnant()) {
 			return;
 		}
-//		System.out.println("Implanted: "+target.getName());
+		// System.out.println("Implanted: "+target.getName());
 		for(PregnancyPossibility pregPoss : potentialPartnersAsMother) {
 			if(pregPoss.getFather()!=null) {
 				pregPoss.getFather().getPotentialPartnersAsFather().remove(pregPoss);
@@ -21574,8 +21787,18 @@
 		}
 		target.addStatusEffect(incubationEffect, 60 * 60 * (72 + Util.random.nextInt(13)));
 		
+		// Edited here! -- Ysette
+		pregnantLitters.remove(0);
+		if(!pregnantLitters.isEmpty()) {
+			pregnantLitter = pregnantLitters.get(0);
+		}
+		else {
+			pregnantLitter = null;
+		}
 
 		// Clear pregnancy status effects and descriptions:
+		// But only if no litters left! -- Ysette
+		if(pregnantLitters.isEmpty()) {
 		List<AbstractStatusEffect> pregnancyStatusEffects = Util.newArrayListOfValues(StatusEffect.PREGNANT_0, StatusEffect.PREGNANT_1, StatusEffect.PREGNANT_2, StatusEffect.PREGNANT_3);
 		for(AbstractStatusEffect se : pregnancyStatusEffects) {
 			removeStatusEffect(se);
@@ -21595,7 +21818,8 @@
 				}
 			}
 		}
-		pregnantLitter = null;
+		}
+
 		this.resetAllPregnancyReactions();
 	}
 	
@@ -21603,11 +21827,23 @@
 		return littersBirthed;
 	}
 
+	// Edited here! -- Ysette
 	public Litter getLastLitterBirthed() {
 		if(littersBirthed.isEmpty()) {
 			return null;
 		}
-		return littersBirthed.get(littersBirthed.size() - 1);
+		Litter lastLitter = littersBirthed.get(littersBirthed.size() - 1); // Get final litter in littersBirthed
+		String lastLitterNum = lastLitter.getId().replace(this.getId(), ""); // Get litterGenerated
+		List<OffspringSeed> lastLitterOffspring = new ArrayList<>();
+		for(Litter litter : littersBirthed) {
+			if(litter.getId().equals(this.getId() + lastLitterNum)) {
+				for(OffspringSeed os : litter.getOffspringSeed()) {
+					lastLitterOffspring.add(os);
+				}
+			}
+		}
+		Litter lastLitterBirthed = new Litter(lastLitter.getConceptionDate(), lastLitter.getBirthDate(), this, lastLitter.getFather(), lastLitter.getFertilisationType(), lastLitterOffspring);
+		return lastLitterBirthed;
 	}
 	
 	public Litter getLastLitterIncubated() {
@@ -21621,12 +21857,38 @@
 		return littersFathered;
 	}
 	
+	// Edited here! -- Ysette
+	public List<Litter> getPregnantLitters() {
+		return pregnantLitters;
+	}
+	
+	// Edited here! -- Ysette
+	public Litter getPregnantLitter(int num) {
+		return pregnantLitters.get(num);
+	}
+
+	// Edited here! -- Ysette
 	public Litter getPregnantLitter() {
+		if(pregnantLitter == null && !pregnantLitters.isEmpty()) {
+			pregnantLitter = pregnantLitters.get(0);
+		}
 		return pregnantLitter;
 	}
 	
+	// Edited here! -- Ysette
+	public void setPregnantLitter(int num, Litter pregnantLitter) {
+		pregnantLitters.set(num, pregnantLitter);
+	}
+
+	// Edited here! -- Ysette
 	public void setPregnantLitter(Litter pregnantLitter) {
 		this.pregnantLitter = pregnantLitter;
+		if(!pregnantLitters.isEmpty()) {
+			pregnantLitters.set(0, pregnantLitter);
+		}
+		else {
+			pregnantLitters.add(pregnantLitter);
+		}
 	}
 
 	public int getLittersGenerated() {
diff -aurdb liliths-throne-public/src/com/lilithsthrone/game/Game.java liliths-throne-public/src/com/lilithsthrone/game/Game.java
--- liliths-throne-public/src/com/lilithsthrone/game/Game.java	2025-01-28 13:28:44.006572310 -0500
+++ liliths-throne-public/src/com/lilithsthrone/game/Game.java	2025-02-01 02:09:35.000000000 -0500
@@ -5515,8 +5515,16 @@
 
 	private void removeNPC(NPC npc) {
 		if(npc.isPregnant()) {
+			// Edited here! -- Ysette
 			// End with birth if father is player
-			npc.endPregnancy(npc.getPregnantLitter().getFather()!=null && npc.getPregnantLitter().getFather().isPlayer());
+			for(Litter pregnantLitter : npc.getPregnantLitters()) {
+				if(pregnantLitter.getFather()!=null && pregnantLitter.getFather().isPlayer()) {
+					npc.endPregnancy(pregnantLitter, true, true);
+				}
+				else {
+					npc.endPregnancy(pregnantLitter, true, true);
+				}
+			}
 			
 		} else if(npc.hasStatusEffect(StatusEffect.PREGNANT_0)) {
 			npc.removeStatusEffect(StatusEffect.PREGNANT_0);
diff -aurdb liliths-throne-public/src/com/lilithsthrone/game/inventory/enchanting/ItemEffectType.java liliths-throne-public/src/com/lilithsthrone/game/inventory/enchanting/ItemEffectType.java
--- liliths-throne-public/src/com/lilithsthrone/game/inventory/enchanting/ItemEffectType.java	2025-01-28 13:28:44.316571941 -0500
+++ liliths-throne-public/src/com/lilithsthrone/game/inventory/enchanting/ItemEffectType.java	2025-01-31 22:06:54.000000000 -0500
@@ -405,18 +405,33 @@
 				
 				target.getPotentialPartnersAsMother().removeIf((pp) -> !pp.getFatherId().equals(target.getPregnantLitter().getFatherId()));
 				
-				GameCharacter father = target.getPregnantLitter().getFather();
-				String unknownFatherName = "Unknown!";
+				// Edited here! -- Ysette
+				StringBuilder litterSB = new StringBuilder();
+				for(Litter litter : target.getPregnantLitters()) {
+					GameCharacter father = litter.getFather();
+					String fatherName = "Unknown!";
+					String fatherRace = "";
 				if(father==null) {
 					try {
-						OffspringSeed offspring0 = target.getPregnantLitter().getOffspringSeed().iterator().next();
+							OffspringSeed offspring0 = litter.getOffspringSeed().iterator().next();
 						if(!offspring0.getFatherName().equals("???")) {
-							unknownFatherName = offspring0.getFatherName();
+								fatherName = offspring0.getFatherName();
+								fatherRace = Util.capitaliseSentence(litter.getFatherRace().getName(Main.game.getNpc(GenericAndrogynousNPC.class).getBody()));
 						}
 					} catch(Exception ex) {
 					}
 				}
-				
+					else {
+						fatherName = father.getNameIgnoresPlayerKnowledge();
+						fatherRace = Util.capitaliseSentence(litter.getFatherRace().getName(father.getBody()));
+					}
+					litterSB.append(
+						"<br/>Father: " + fatherName + " (" + fatherRace + ")" + "<br/>"
+						+ "Litter size: " + litter.getTotalLitterCount() + "<br/>"
+						+ "[style.colourFeminine(Daughters)]: " +(litter.getDaughtersFromFather()+litter.getDaughtersFromMother())+"<br/>"
+						+ "[style.colourMasculine(Sons)]: " +(litter.getSonsFromFather()+litter.getSonsFromMother())+"<br/>"
+					);
+				}
 				return "<p style='text-align:center;'>"
 						+ "The digital readout lights up with two parallel red lines, with flashing pink text next to that displaying:"
 						+ "<br/><b>'[style.italicsArcane(Pregnant!)]'</b>"
@@ -424,12 +439,7 @@
 					+ "<p style='text-align:center;'>"
 						+ "Underneath the flashing pregnancy confirmation, there's some extra information, which reads:<br/>"
 						+ "<i>"
-						+ "Father: "+(father!=null
-										?father.getNameIgnoresPlayerKnowledge()+" ("+Util.capitaliseSentence(target.getPregnantLitter().getFatherRace().getName(father.getBody()))+")"
-										:unknownFatherName+" ("+Util.capitaliseSentence(target.getPregnantLitter().getFatherRace().getName(Main.game.getNpc(GenericAndrogynousNPC.class).getBody()))+")")+"<br/>"
-						+ "Litter size: " +target.getPregnantLitter().getTotalLitterCount()+"<br/>"
-						+ "[style.colourFeminine(Daughters)]: " +(target.getPregnantLitter().getDaughtersFromFather()+target.getPregnantLitter().getDaughtersFromMother())+"<br/>"
-						+ "[style.colourMasculine(Sons)]: " +(target.getPregnantLitter().getSonsFromFather()+target.getPregnantLitter().getSonsFromMother())+"<br/>"
+						+ litterSB.toString()
 						+ "</i>"
 					+ "</p>";
 				
diff -aurdb liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisAnus.java liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisAnus.java
--- liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisAnus.java	2025-01-28 13:28:44.415571823 -0500
+++ liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisAnus.java	2025-01-22 05:09:29.000000000 -0500
@@ -1,5 +1,228 @@
 package com.lilithsthrone.game.sex.sexActions.baseActionsSelf;
 
+import com.lilithsthrone.game.character.attributes.CorruptionLevel;
+import com.lilithsthrone.game.character.body.valueEnums.PenetrationModifier;
+import com.lilithsthrone.game.character.body.valueEnums.PenisLength;
+import com.lilithsthrone.game.dialogue.utils.UtilText;
+import com.lilithsthrone.game.sex.ArousalIncrease;
+import com.lilithsthrone.game.sex.SexAreaOrifice;
+import com.lilithsthrone.game.sex.SexAreaPenetration;
+import com.lilithsthrone.game.sex.SexPace;
+import com.lilithsthrone.game.sex.SexParticipantType;
+import com.lilithsthrone.game.sex.sexActions.SexAction;
+import com.lilithsthrone.game.sex.sexActions.SexActionType;
+import com.lilithsthrone.main.Main;
+import com.lilithsthrone.utils.Util;
+import com.lilithsthrone.utils.Util.Value;
+
+/**
+ * @since 0.4.9
+ * @version 0.4.10
+ * @author X&Y
+ */
 public class SelfPenisAnus {
 
+	public static final SexAction SELF_AUTOPENETRATION_ANUS_START = new SexAction(
+			SexActionType.START_ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.TWO_HORNY,
+			Util.newHashMapOfValues(new Value<>(SexAreaOrifice.ANUS, SexAreaPenetration.PENIS)),
+			SexParticipantType.SELF) {
+		@Override
+		public boolean isBaseRequirementsMet() {
+			return !Main.sex.getCharacterPerformingAction().isTaur()
+					&& Main.sex.getCharacterPerformingAction().hasPenisModifier(PenetrationModifier.PREHENSILE)
+					&& Main.sex.getCharacterPerformingAction().getPenisRawSizeValue()>=PenisLength.FOUR_HUGE.getMinimumValue();
+		}
+        @Override
+		public String getActionTitle() {
+			return "Self-peg";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Start pegging [npc.her] [npc.ass+] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return (UtilText.returnStringAtRandom(
+					"Snaking [npc.her] [npc.cock] around between [npc.her] [npc.legs], [npc.name] [npc.verb(tease)] the tip over the entrance to [npc.her] [npc.asshole+], [npc.moaning] in delight before thrusting it deep inside [npc.herself].",
+					"[npc.Name] [npc.verb(snake)] [npc.her] [npc.cock] up between [npc.her] legs, [npc.moaning] in delight as [npc.she] [npc.verb(force)] it deep into [npc.her] inviting [npc.asshole].",
+					"Sliding the tip of [npc.her] [npc.cock+] between the folds of [npc.her] neglected [npc.ass], [npc.name] suddenly [npc.verb(thrust)] it deep inside, letting out [npc.a_moan+] as [npc.she] [npc.verb(start)] fucking [npc.her] own [npc.ass].",
+					"[npc.Name] eagerly [npc.verb(thrust)] [npc.her] [npc.cock+] deep into [npc.her] needy [npc.ass], letting out a series of [npc.moans+] as [npc.she] [npc.verb(start)] fucking [npc.her] own [npc.ass]."));
+		}
+	};
+	
+	public static final SexAction DOM_SELF_AUTOPENETRATION_ANUS_GENTLE = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.ANUS)),
+			SexParticipantType.SELF,
+			SexPace.DOM_GENTLE) {
+
+		@Override
+		public String getActionTitle() {
+			return "Gently peg yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Gently peg [npc.her] [npc.ass+] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] slowly [npc.verb(push)] [npc.her] [npc.cock] deep inside [npc.her] [npc.ass+].",
+					"Gently pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] rhythmically [npc.verb(fuck)] [npc.her] own [npc.ass].",
+					"Slowly driving [npc.her] [npc.cock] deep inside [npc.her] [npc.ass+], [npc.name] [npc.verb(let)] out a little whimper as [npc.she] [npc.verb(start)] gently fucking [npc.her] own [npc.ass].",
+					"Focusing on pleasuring [npc.herself], [npc.name] [npc.verb(start)] gently pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+].");
+		}
+		
+	};
+	
+	public static final SexAction DOM_SELF_AUTOPENETRATION_ANUS_NORMAL = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.ANUS)),
+			SexParticipantType.SELF,
+			SexPace.DOM_NORMAL) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Self-peg";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Concentrate on fucking [npc.her] own [npc.ass] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] greedily [npc.verb(push)] [npc.her] [npc.cock] deep inside [npc.her] [npc.ass+].",
+					"Pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] rhythmically [npc.verb(fuck)] [npc.her] own [npc.ass].",
+					"Driving [npc.her] [npc.cock] deep inside [npc.her] [npc.ass], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] happily pegging [npc.her] own [npc.ass].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] [npc.verb(start)] pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+].");
+		}
+	};
+	
+	public static final SexAction DOM_SELF_AUTOPENETRATION_ANUS_ROUGH = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.ANUS)),
+			SexParticipantType.SELF,
+			SexPace.DOM_ROUGH) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Roughly peg yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Roughly peg [npc.herself] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] roughly [npc.verb(slam)] [npc.her] [npc.cock] deep inside [npc.her] [npc.ass+], before starting to roughly peg [npc.herself].",
+					"Roughly pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] ruthlessly [npc.verb(fuck)] [npc.her] own [npc.ass].",
+					"Driving [npc.her] [npc.cock] deep inside [npc.her] [npc.ass], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] roughly grinding it up inside [npc.herself].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] [npc.verb(start)] roughly slamming [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+].");
+		}
+	};
+	
+	public static final SexAction SUB_SELF_AUTOPENETRATION_ANUS_NORMAL = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.ANUS)),
+			SexParticipantType.SELF,
+			SexPace.SUB_NORMAL) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Self-peg";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Concentrate on fucking [npc.her] own [npc.ass] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] greedily [npc.verb(push)] [npc.her] [npc.cock] deep inside [npc.her] [npc.ass+].",
+					"Pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] rhythmically [npc.verb(fuck)] [npc.her] own [npc.ass].",
+					"Driving [npc.her] [npc.cock] deep inside [npc.her] [npc.ass], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] happily fucking [npc.her] own [npc.ass].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] [npc.verb(start)] pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+].");
+		}
+		
+	};
+	
+	public static final SexAction SUB_SELF_AUTOPENETRATION_ANUS_EAGER = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.ANUS)),
+			SexParticipantType.SELF,
+			SexPace.SUB_EAGER) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Eagerly peg yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Eagerly peg [npc.herself] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] eagerly [npc.verb(slam)] [npc.her] [npc.cock] deep inside [npc.her] [npc.ass+], before starting to desperately peg [npc.herself].",
+					"Enthusiastically pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] frantically [npc.verb(fuck)] [npc.her] own [npc.ass].",
+					"Desperately driving [npc.her] [npc.cock] deep inside [npc.her] [npc.ass], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] eagerly grinding it up inside [npc.herself].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] eagerly [npc.verb(start)] slamming [npc.her] [npc.cock] in and out of [npc.her] [npc.ass+].");
+		}
+	};
+	
+	public static final SexAction SELF_AUTOPENETRATION_ANUS_STOP_PENETRATION = new SexAction(
+			SexActionType.STOP_ONGOING,
+			ArousalIncrease.TWO_LOW,
+			ArousalIncrease.TWO_LOW,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.ANUS)),
+			SexParticipantType.SELF) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Stop pegging yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Stop fucking [npc.her] own [npc.ass] with [npc.her] [npc.cock].";
+		}
+
+		@Override
+		public String getDescription() {
+			return "Letting out [npc.a_moan], [npc.name] [npc.verb(slide)] [npc.her] [npc.cock+] out of [npc.her] [npc.ass+].";
+		}
+	};
 }
diff -aurdb liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisVagina.java liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisVagina.java
--- liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisVagina.java	2025-01-28 13:28:44.416571821 -0500
+++ liliths-throne-public/src/com/lilithsthrone/game/sex/sexActions/baseActionsSelf/SelfPenisVagina.java	2025-01-22 05:09:30.000000000 -0500
@@ -1,5 +1,228 @@
 package com.lilithsthrone.game.sex.sexActions.baseActionsSelf;
 
+import com.lilithsthrone.game.character.attributes.CorruptionLevel;
+import com.lilithsthrone.game.character.body.valueEnums.PenetrationModifier;
+import com.lilithsthrone.game.character.body.valueEnums.PenisLength;
+import com.lilithsthrone.game.dialogue.utils.UtilText;
+import com.lilithsthrone.game.sex.ArousalIncrease;
+import com.lilithsthrone.game.sex.SexAreaOrifice;
+import com.lilithsthrone.game.sex.SexAreaPenetration;
+import com.lilithsthrone.game.sex.SexPace;
+import com.lilithsthrone.game.sex.SexParticipantType;
+import com.lilithsthrone.game.sex.sexActions.SexAction;
+import com.lilithsthrone.game.sex.sexActions.SexActionType;
+import com.lilithsthrone.main.Main;
+import com.lilithsthrone.utils.Util;
+import com.lilithsthrone.utils.Util.Value;
+
+/**
+ * @since 0.4.9
+ * @version 0.4.10
+ * @author X&Y
+ */
 public class SelfPenisVagina {
 
+	public static final SexAction SELF_AUTOPENETRATION_VAGINA_START = new SexAction(
+			SexActionType.START_ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.TWO_HORNY,
+			Util.newHashMapOfValues(new Value<>(SexAreaOrifice.VAGINA, SexAreaPenetration.PENIS)),
+			SexParticipantType.SELF) {
+		@Override
+		public boolean isBaseRequirementsMet() {
+			return !Main.sex.getCharacterPerformingAction().isTaur()
+					&& Main.sex.getCharacterPerformingAction().hasPenisModifier(PenetrationModifier.PREHENSILE)
+					&& Main.sex.getCharacterPerformingAction().getPenisRawSizeValue()>=PenisLength.FOUR_HUGE.getMinimumValue();
+		}
+        @Override
+		public String getActionTitle() {
+			return "Self-fuck";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Start fucking [npc.her] [npc.pussy+] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return (UtilText.returnStringAtRandom(
+					"Snaking [npc.her] [npc.cock] around between [npc.her] [npc.legs], [npc.name] [npc.verb(tease)] the tip over the entrance to [npc.her] [npc.pussy], [npc.moaning] in delight before thrusting it deep inside [npc.herself].",
+					"[npc.Name] [npc.verb(snake)] [npc.her] [npc.cock] up between [npc.her] legs, [npc.moaning] in delight as [npc.she] [npc.verb(force)] it deep into [npc.her] inviting [npc.pussy].",
+					"Sliding the tip of [npc.her] [npc.cock+] between the folds of [npc.her] neglected [npc.pussy], [npc.name] suddenly [npc.verb(thrust)] it deep inside, letting out [npc.a_moan+] as [npc.she] [npc.verb(start)] fucking [npc.herself].",
+					"[npc.Name] eagerly [npc.verb(thrust)] [npc.her] [npc.cock+] deep into [npc.her] needy [npc.pussy], letting out a series of [npc.moans+] as [npc.she] [npc.verb(start)] fucking [npc.herself]."));
+		}
+	};
+	
+	public static final SexAction DOM_SELF_AUTOPENETRATION_VAGINA_GENTLE = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.VAGINA)),
+			SexParticipantType.SELF,
+			SexPace.DOM_GENTLE) {
+
+		@Override
+		public String getActionTitle() {
+			return "Gently fuck yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Gently fuck [npc.her] [npc.pussy+] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] slowly [npc.verb(push)] [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy+].",
+					"Gently pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] rhythmically [npc.verb(fuck)] [npc.herself].",
+					"Slowly driving [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy+], [npc.name] [npc.verb(let)] out a little whimper as [npc.she] [npc.verb(start)] gently fucking [npc.herself].",
+					"Focusing on pleasuring [npc.herself], [npc.name] [npc.verb(start)] gently pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+].");
+		}
+		
+	};
+	
+	public static final SexAction DOM_SELF_AUTOPENETRATION_VAGINA_NORMAL = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.VAGINA)),
+			SexParticipantType.SELF,
+			SexPace.DOM_NORMAL) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Self-fuck";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Concentrate on fucking [npc.herself] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] greedily [npc.verb(push)] [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy+].",
+					"Pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] rhythmically [npc.verb(fuck)] [npc.herself].",
+					"Driving [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] happily fucking [npc.herself].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] [npc.verb(start)] pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+].");
+		}
+	};
+	
+	public static final SexAction DOM_SELF_AUTOPENETRATION_VAGINA_ROUGH = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.VAGINA)),
+			SexParticipantType.SELF,
+			SexPace.DOM_ROUGH) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Roughly fuck yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Roughly fuck [npc.herself] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] roughly [npc.verb(slam)] [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy+], before starting to roughly fuck [npc.herself].",
+					"Roughly pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] ruthlessly [npc.verb(fuck)] [npc.herself].",
+					"Driving [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] roughly grinding it up inside [npc.herself].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] [npc.verb(start)] roughly slamming [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+].");
+		}
+	};
+	
+	public static final SexAction SUB_SELF_AUTOPENETRATION_VAGINA_NORMAL = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.VAGINA)),
+			SexParticipantType.SELF,
+			SexPace.SUB_NORMAL) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Self-fuck";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Concentrate on fucking [npc.herself] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] greedily [npc.verb(push)] [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy+].",
+					"Pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] rhythmically [npc.verb(fuck)] [npc.herself].",
+					"Driving [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] happily fucking [npc.herself].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] [npc.verb(start)] pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+].");
+		}
+		
+	};
+	
+	public static final SexAction SUB_SELF_AUTOPENETRATION_VAGINA_EAGER = new SexAction(
+			SexActionType.ONGOING,
+			ArousalIncrease.FOUR_HIGH,
+			ArousalIncrease.FOUR_HIGH,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.VAGINA)),
+			SexParticipantType.SELF,
+			SexPace.SUB_EAGER) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Eagerly fuck yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Eagerly fuck [npc.herself] with [npc.her] [npc.cock+].";
+		}
+
+		@Override
+		public String getDescription() {
+			return UtilText.returnStringAtRandom(
+					"[npc.A_moan+] escapes from between [npc.namePos] [npc.lips+] as [npc.she] eagerly [npc.verb(slam)] [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy+], before starting to desperately fuck [npc.herself].",
+					"Enthusiastically pumping [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+], [npc.name] [npc.verb(start)] letting out a series of delighted [npc.moans] as [npc.she] frantically [npc.verb(fuck)] [npc.herself].",
+					"Desperately driving [npc.her] [npc.cock] deep inside [npc.her] [npc.pussy], [npc.name] [npc.verb(let)] out [npc.a_moan] as [npc.she] [npc.verb(start)] eagerly grinding it up inside [npc.herself].",
+					"Focusing on the pleasure [npc.sheIs] giving [npc.herself] between [npc.her] [npc.legs], [npc.name] eagerly [npc.verb(start)] slamming [npc.her] [npc.cock] in and out of [npc.her] [npc.pussy+].");
+		}
+	};
+	
+	public static final SexAction SELF_AUTOPENETRATION_VAGINA_STOP_PENETRATION = new SexAction(
+			SexActionType.STOP_ONGOING,
+			ArousalIncrease.TWO_LOW,
+			ArousalIncrease.TWO_LOW,
+			CorruptionLevel.ONE_VANILLA,
+			Util.newHashMapOfValues(new Value<>(SexAreaPenetration.PENIS, SexAreaOrifice.VAGINA)),
+			SexParticipantType.SELF) {
+		
+		@Override
+		public String getActionTitle() {
+			return "Stop fucking yourself";
+		}
+
+		@Override
+		public String getActionDescription() {
+			return "Stop fucking [npc.herself] with [npc.her] [npc.cock].";
+		}
+
+		@Override
+		public String getDescription() {
+			return "Letting out [npc.a_moan], [npc.name] [npc.verb(slide)] [npc.her] [npc.cock+] out of [npc.her] [npc.pussy+].";
+		}
+	};
 }
